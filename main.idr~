module Main

import Data.Vect
import public Vect3
import public Ray
import public Hitable
import public HitableList
import public Camera
import Effects
import Effect.StdIO
import Effect.Random
import Effect.System


listRand : Nat -> Eff (List Int) [RND]
listRand k = ?listRand_rhs


--listRand Z = pure []
--listRand (S k) = do
--  v <- rndInt 5 55
--  rest <- listRand k
--  pure $ (v :: rest)

--testRand : Eff () [RND, SYSTEM, STDIO]
--testRand = do
--  t <- time
--  srand t

genRand : Int -> Int -> Eff Double [RND]
genRand u nu = do v <- rndInt 0 9999999999999998
                  let fv = the Double $ (cast v) / 10000000000000000.0
                  pure $ the Double $ (cast u + fv) / cast nu

color : Ray -> HitableList -> Vect3 
color r@(MkRay origin direction) world =
  case hitL world r 0.0 9.9e999 of
       Nothing => let unitDir = unit direction
                      t = 0.5 * (getY unitDir) + 1.0 in
                      map (*(1.0-t)) [1.0, 1.0, 1.0] + map (*t) [0.5, 0.7, 1.0]
       Just (MkHR t p normal) => map (\x => 0.5 * (x+1)) normal

printVect3 : Vect 3 Int -> String
printVect3 (x :: y :: z :: []) = show x ++ " " ++ show y ++ " " ++ show z

getSamples : Int -> Int -> Int -> Int -> Camera -> HitableList ->
             Eff Vect3 [RND]
getSamples i j nx ny camera world = do
  u <- genRand i nx
  v <- genRand j ny
  let r = getRay camera u v
  pure $ color r world

helper2 : Int -> Int -> Int -> Camera -> HitableList ->
          (Int, Int) -> IO String
helper2 nx ny ns camera world (j, i) = do
    col <- run $ mapE (\x => getSamples i j nx ny camera world) [0..(ns-1)]
    pure $ printVect3 $ map (the Int . cast) $ map outMap $ sum col
  where
    outMap : Double -> Double
    outMap x = (*) 255.99 $ x / (cast ns)

startT : Int -> Int -> Int -> Camera -> HitableList ->
         IO ()
startT nx ny ns camera world = do
  strs <- traverse (\v => helper2 nx ny ns camera world v) [(j,i) | j <- [(ny-1),(ny-2)..0], i <- [0..(nx-1)]]
  traverse_ (\x => putStrLn x) strs

main : IO ()
main =
  let nx = the Int 200
      ny = the Int 100
      ns = the Int 100
      header = the (List String) ["P3", show nx, show ny, "255"]
      camera = defaultCamera
      world = [Sphere [0,0,-1] 0.5, Sphere [0,-100.5,-1] 100] in do
      traverse_ putStrLn header
      startT nx ny ns camera world
