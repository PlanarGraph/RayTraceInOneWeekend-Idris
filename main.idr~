module Main

import Data.Vect
import public Vect3
import public Ray
import public Sphere
import public Hitable
import public HitableList
import public Camera
import Effects
import Effect.StdIO
import Effect.Random
import Effect.System

genRand : Int -> Int -> Eff Double [RND, SYSTEM]
genRand u nu = do t <- time
                  srand t
                  v <- rndInt 0 10000000000
                  let fv = the Double $ (cast v) / 10000000000.0
                  pure $ the Double $ (cast u + fv) / cast nu

color : Hitable a => Ray -> HitableList a -> Vect3 
color r@(MkRay origin direction) world =
  case hitL world r 0.0 9.9e999 of
       Nothing => let unitDir = unit direction
                      t = 0.5 * (getY unitDir) + 1.0 in
                      map (*(1.0-t)) [1.0, 1.0, 1.0] + map (*t) [0.5, 0.7, 1.0]
       Just (MkHR t p normal) => map (\x => 0.5 * (x+1)) normal


printVect3 : Vect 3 Int -> String
printVect3 (x :: y :: z :: []) = show x ++ " " ++ show y ++ " " ++ show z

helper : Hitable a => Int -> Int -> Int -> Camera -> HitableList a -> (Int, Int) -> IO ()
helper nx ny ns camera world (a, b) = ?helper_rhs_1

-- helper = nx ny ns camera world v  =
  -- putStrLn "Hello"
  --let fn = (iter i j nx ny camera world) in do
  --    col <- foldM fn [0,0,0] [0..(ns-1)]
  --    putStrLn "Test"
  --    pure ()
  --where 
  --  outMap : Int -> Double -> Int
  --  outMap ns x = (the Int . cast . (*255.99)) $ x / (cast ns)

iter : Hitable a => Int -> Int -> Int -> Int -> Camera -> HitableList a ->
       Vect3 -> Int -> IO Vect3
iter i j nx ny camera world col a = do
  u <- run $ genRand i nx
  v <- run $ genRand j ny
  let r = getRay camera u v
  -- let p = point_at_parameter r 2.0
  pure (col + color r world)


main : IO ()
main =
  let nx = the Int 200
      ny = the Int 100
      ns = the Int 100
      header = the (List String) ["P3", show nx, show ny, "255"]
      camera = defaultCamera
      world = MkHL [MkSphere [0,0,-1] 0.5, MkSphere [0,-100.5,-1] 100]
      hlp = (helper nx ny ns camera world) in do
      traverse_ putStrLn header
      vals <- traverse hlp [ (j, i) | j <- [(ny-1),(ny-2)..0], i <- [0..(nx-1)]]
      putStrLn "Done"    
